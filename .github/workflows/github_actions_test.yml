name: Test CI/CD pipeline
on:
  push:
    branches:
      - main
      - 'feature/**'
    paths-ignore:
      - 'README.md'
      - '.gitignore'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.gitignore'
jobs:
#  supposed-to-fail:
#    runs-on: ubuntu-latest
#    continue-on-error: true
#    steps:
#      - name: step-should-fail
#        run: |
#          echo "This job is supposed to fail but workflow run should still be successful."
#          dksjfhkd
  try-step-outputs:
    if: false # disabled for now
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
      - name: Failed step
        run: dgsdfgdfg
      - name: Step with output
        if: failure()
        id: step-with-output
        run: |
          if [ -e test.txt ]; then
            echo "FILE_PRESENT=1" >> "$GITHUB_OUTPUT"
          else
            echo "FILE_PRESENT=0" >> "$GITHUB_OUTPUT"         
          fi
      - name: Print step output
        if: failure()
        run: echo ${{steps.step-with-output.outputs.FILE_PRESENT}}
      - name: Evaluate output 1
        id: evaluate-output-1
        if: failure() && steps.step-with-output.outputs.FILE_PRESENT == 1
        run: echo "File is present"
      - name: Evaluate output 2
        id: evaluate-output-2
        if: failure() && steps.step-with-output.outputs.FILE_PRESENT == 0
        run: echo "File is not present"
  try-step-outcomes:
    runs-on: ubuntu-latest
    if: false # disabled for now
    steps:
      - name: Successful step
        id: successful-step
        run: echo "Successful step"
      - name: Evaluate Successful step's success
        if: steps.successful-step.outcome == 'success'
        run: |
          sleep 5
          echo "Successful step's success outcome properly detected"
      - name: Evaluate Successful step's failure
        if: steps.successful-step.outcome == 'failure'
        run: echo "If this is printed step outcome of Successful step wasn't detected properly!"
#      - name: Failed step
#        id: failed-step
#        run: sdkfljsdf
      - name: Step following failed step
        if: success() || failure()
        run: echo "This line should be printed"
      - name: Important step following success/failure condition
        if: failure()
        run: echo "This line should be printed"
      - name: One more step to be sure
        run: echo "This line should be printed"
      - name: Reaction to workflow cancellation
        if: cancelled()
        run: echo "The workflow was cancelled and this line is printed as a reaction"
  #      - name: Evaluate Failed step's success
#        if: always() && steps.failed-step.outcome == 'success'
#        run: echo "If this is printed step outcome of Failed step wasn't detected properly!"
#      - name: Evaluate Failed step's failure
#        if: always() && steps.failed-step.outcome == 'failure'
#        run: echo "Failed step's failure outcome properly detected."
  notify-teams:
    uses: ./.github/workflows/reusable_notify_teams.yml
    with:
      stage: dev
    secrets:
        TEAMS_WEBHOOK_URI_NTT: ${{secrets.TEAMS_WEBHOOK_URI_NTT}}
  test:
    if: false # disabled for now
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Print path after primary repo checkout
        run: |
          pwd
          ls -la
      - name: Checkout other repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: kokriszti/git_gyak
          path: folder-for-second-repo
      - name: Print path after second repo checkout
        run: |
          cd folder-for-second-repo
          ls -la
      - name: Delete to_remove.txt if exists
        run: |
          cd folder-for-second-repo
          if [ -e to_remove.txt ]; then
            echo "to_remove.txt exists, removing..."
            rm to_remove.txt
          else
            echo "to_remove.txt does not exist."
          fi
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Run tests
        run: mvn test
      - name: Generate list using Markdown
        run: |
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY
  docker:
    runs-on: ubuntu-latest
    if: false # disabled for now
    outputs:
      next-version: ${{ steps.define-next-version.outputs.NEXT_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Disabling shallow clone to improve relevancy of sonar reporting
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package -DskipTests
      - name: define-next-version
        id: define-next-version
        run: |
          chmod +x .github/script/tag_script.sh
          ./.github/script/tag_script.sh
        shell: bash
      - name: docker-login
        env:
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
          DOCKER_USER: ${{secrets.DOCKER_USER}}
        run:
          echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USER --password-stdin
      - name: docker-build
        run:
          docker build --build-arg JAR_PATH=target -t kokriszti/github-actions-test:${{ steps.define-next-version.outputs.NEXT_VERSION }} .
#      - name: docker-tag
#        run: |
#          echo "The next tag is: ${{ steps.define-next-version.outputs.NEXT_VERSION }}"
#          docker tag github-actions-test:${{ steps.define-next-version.outputs.NEXT_VERSION }} kokriszti/github-actions-test:${{ steps.define-next-version.outputs.NEXT_VERSION }}
      - name: docker-push
        run:
          docker push kokriszti/github-actions-test:${{ steps.define-next-version.outputs.NEXT_VERSION }}
      - name: docker-re-tag
        run: |
          echo "Re-tagging image ${{ steps.define-next-version.outputs.next-version }} with tag re-tagged"
          docker tag kokriszti/github-actions-test:${{ steps.define-next-version.outputs.next-version }} kokriszti/github-actions-test:re-tagged
      - name: docker-push-re-tagged
        run:
          docker push kokriszti/github-actions-test:re-tagged






          
      